name: Build Image

on:   
  # push: 
  pull_request:
  workflow_dispatch:

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    name: Build Bootloader
    steps:
      - uses: actions/checkout@v3
        name: Checkout submodules
        with:
          submodules: "recursive"

      - name: Prepare esp_driver
        working-directory: esp-hosted/esp_hosted_ng/esp/esp_driver
        run: |
          cmake .
    
      - name: Build esp_driver
        working-directory: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter
        run: |
          . ../esp-idf/export.sh
          idf.py set-target esp32s3
          cp sdkconfig.defaults.esp32s3 sdkconfig
          idf.py build

      - name: Upload partition-table.bin
        uses: actions/upload-artifact@v3
        with:
          name: partitions-table
          path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/partition_table/partition-table.bin
  
      - name: Upload bootloader.bin
        uses: actions/upload-artifact@v3
        with:
          name: bootloader
          path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/bootloader/bootloader.bin

      - name: Upload network_adapter.bin
        uses: actions/upload-artifact@v3
        with:
          name: firmware
          path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/network_adapter.bin

  # create-release:
  #   runs-on: ubuntu-latest
  #   name: Create release
  #   steps:
  #     - uses: actions/checkout@v3

      - uses: actions/create-release@latest
        if: github.ref_type == 'tag'
        name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Created automatically on tag creation.
            Download all files into the same folder and run ./flash-all.sh script. 
            Connect ESP32-S3 board to any USB port prior to running script.
          draft: false
          prerelease: false
      
      - name: Upload partition-table.bin to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: partition-table.bin
          asset_path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/partition_table/partition-table.bin

      - name: Upload bootloader.bin to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: bootloader.bin
          asset_path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/bootloader/bootloader.bin

      - name: Upload network_adapter.bin to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: network_adapter.bin
          asset_path: esp-hosted/esp_hosted_ng/esp/esp_driver/network_adapter/build/network_adapter.bin

  # build-image:
  #   runs-on: ubuntu-latest
  #   name: Build Image
  #   steps:

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: help2man libtool-bin ninja-build
          version: 1.0

      - uses: actions/checkout@v3
        name: Checkout submodules
        with:
          submodules: "recursive"

      - name: Build dynconfig
        run: |
          make -C xtensa-dynconfig ORIG=1 CONF_DIR=`pwd` esp32s3.so
      
      - name: Build crosstoll-NG
        working-directory: crosstool-NG
        run: |
          ./bootstrap && ./configure --enable-local && make
          
      - name: Prepare toolchain build
        working-directory: crosstool-NG
        run: |
          ./ct-ng xtensa-esp32s3-linux-uclibcfdpic
          sed -i -e '/CT_LOG_PROGRESS_BAR/s/y$/n/' .config

      - name: Build toolchain
        working-directory: crosstool-NG
        continue-on-error: true
        run: |
          CT_PREFIX=`pwd`/builds XTENSA_GNU_CONFIG=`pwd`/../xtensa-dynconfig/esp32s3.so ./ct-ng build --quiet

      - name: Upload toolchain build log
        uses: actions/upload-artifact@v3
        with:
          name: toolchain-build.log
          path: |
            crosstool-NG/build.log
            crosstool-NG/.config
        if: failure()

      - name: Configure buildroot 
        run: |
          make -C buildroot O=`pwd`/build-buildroot-esp32s3 esp32s3_defconfig
          buildroot/utils/config --file build-buildroot-esp32s3/.config --set-str TOOLCHAIN_EXTERNAL_PATH `pwd`/crosstool-NG/builds/xtensa-esp32s3-linux-uclibcfdpic
          buildroot/utils/config --file build-buildroot-esp32s3/.config --set-str TOOLCHAIN_EXTERNAL_PREFIX '$(ARCH)-esp32s3-linux-uclibcfdpic'
          buildroot/utils/config --file build-buildroot-esp32s3/.config --set-str TOOLCHAIN_EXTERNAL_CUSTOM_PREFIX '$(ARCH)-esp32s3-linux-uclibcfdpic'
      
      - name: Build buildroot 
        run: |
          XTENSA_GNU_CONFIG=`pwd`/xtensa-dynconfig/esp32s3.so make -C buildroot O=`pwd`/build-buildroot-esp32s3

      - name: Upload xipImage
        uses: actions/upload-artifact@v3
        with:
          name: xipImage
          path: build-buildroot-esp32s3/images/xipImage

      - name: Upload rootfs
        uses: actions/upload-artifact@v3
        with:
          name: rootfs.cramfs
          path: build-buildroot-esp32s3/images/rootfs.cramfs

      - name: Upload etc.jffs2
        uses: actions/upload-artifact@v3
        with:
          name: etc.jffs2
          path: build-buildroot-esp32s3/images/etc.jffs2

      - name: Upload linux-kernel to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: xipImage
          asset_path: build-buildroot-esp32s3/images/xipImage

      - name: Upload rootfs.cramfs to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: rootfs.cramfs
          asset_path: build-buildroot-esp32s3/images/rootfs.cramfs

      - name: Upload etc.jffs2 to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-binary
          asset_name: etc.jffs2
          asset_path: build-buildroot-esp32s3/images/etc.jffs2

      - name: Upload flash-all.sh to release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/x-sh
          asset_name: flash-all.sh
          asset_path: output/flash-all.sh